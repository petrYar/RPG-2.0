#include <iostream>	
#include <ctime>	
#include <cstdlib>	
#include <cstring>	
#include <Windows.h>	
using namespace std;

void ShowNameOfGame();
int ShowAndChooseMainMenu();
int ShowAndChoosePlayMenu();
void ShowRules();
void ShowCreators();

char **CreateMap(int rows, int cols);
void FillMap(char **map, int rows, int cols);
void ShowMap(char **map, int rows, int cols);
void DeleteMap(char **map, int rows);

void EnterNameOfCharacter(char name[], const int SIZEOFNAME);
void PlayerCreate(char **map, int rows, int cols);
void Move(char **map, int rows, int cols);

void Interface(char name[], const int SIZEOFNAME, int strength, int strengthExp, int agility, int agilityExp, int intelligence, int intelligenceExp,
	int lifeForce, int lifeForceExp, int endurance, int enduranceExp, int luck, int luckExp, int adaptivity, bool adaptiveSkills, int experience, int lvl);

void MonstersSpawn(char **map, int rows, int cols);
void GateToNextLvlSpawn(char **map, int rows, int cols);

int Authorisation(char password[2]);
void Commands(char **map, int rows, int cols, char password[2]);
void ListOfCommands();

int Attack();
void AttackCout();
void experience();
void ShowAttackOfEnemy();
void AttackOfEnemy();
void LootGenerator();
void InventoryShow();
void LocationInfo();

int main()
{
	srand(time(nullptr));

	char password[2]{ "/" };

	int lvl = 0;
	int experience = 0;
	int lifeForce = 10;
	int lifeForceExp = 0;
	int strength = 10;
	int strengthExp = 0;
	int agility = 10;
	int agilityExp = 0;
	int intelligence = 10;
	int intelligenceExp = 0;
	int endurance = 10;
	int enduranceExp = 0;
	int luck = 1;
	int luckExp = 0;
	int adaptivity = 0;
	bool adaptiveSkills = false;
	///int leadership = 1;
	///int leadershipExp = 0;

	bool exit1 = false;
	char choice2;
	int rows = rand() % 9 + 12;
	int cols = rand() % 9 + 12;
	const int SIZEOFNAME = 15;
	char name[SIZEOFNAME]{};

	/*
		int magic, enemyHp, playerHp, playerDamage, playerMp, choice, enemyMp;
		int enemyResistancePhysic, enemyResistanceMagic, playerResistancePhysic, playerResistanceMagic;
		int enemyPhysicDamage = 100;
		int enemyMagicDamage = 200;
		int fireball = 100;
		int bolter = 60;
		int fireballMp = 50;
		int bolterMp = 30;
		int punch = 50;
		int kick = 30;
		int enemyRegeneration = 10;
		int playerRegeneration = 10;
		int enemyMpRegeneration = 10;
		int playerMpRegeneration = 10;
		int mp = 100;
		int turn = 1;
		int manaDrain = 100;
		int shieldSlam = 50;
		int shieldSlamMp = 20;
	*/

	/*
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~В будущем~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Обновление 3.0
	|~~~~~~~~~~|
	Добавление :
	Лут(через рандом)[3.0]
	Сборка артефактов за лут(материал)[3.1]
	Улучшение врага[3.2]
	Добавление режимов : Лёгкий , Средний, Сложный, Нереальный, Пекло(Только удача!Только хардкор!).[3.3]
	Обучение(Выбор на начале игры).[3.4]
	Добавление характеристик.(Голод,Жажда,Усталость,Хп,Мана)[3.5]
	График(картинка) характеристик.[3.6]
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	*/

	/*
	cout << "Enter your HP\n";
	cin >> playerHp;
	cout << "Enter your MP\n";
	cin >> playerMp;
	cout << "Enter HP of enemy\n";
	cin >> enemyHp;
	cout << "Enter MP of enemy\n";
	cin >> enemyMp;
	cout << "Enter physic resistance of enemy\n";
	cin >> enemyResistancePhysic;
	cout << "Enter magic resistance of enemy\n";
	cin >> enemyResistanceMagic;
	cout << "Enter physic resistance of player\n";
	cin >> playerResistancePhysic;
	cout << "Enter magic resistance of player\n";
	cin >> playerResistanceMagic;

	if (playerResistancePhysic > 100)
	{
		cout << "Nothing can have resistance more than 100% . Resistance changed to 100 %\n";
		playerResistancePhysic = 100;
	}
	if (playerResistanceMagic > 100)
	{
		cout << "Nothing can have resistance more than 100% . Resistance changed to 100 %\n";
		playerResistanceMagic = 100;
	}
	if (enemyResistanceMagic > 100)
	{
		cout << "Nothing can have resistance more than 100% . Resistance changed to 100 %\n";
		enemyResistanceMagic = 100;
	}
	if (enemyResistancePhysic > 100)
	{
		cout << "Nothing can have resistance more than 100% . Resistance changed to 100 %\n";
		enemyResistancePhysic = 100;
	}

	if (enemyResistancePhysic < 0)
	{
		cout << "Nothing can have resistance less than 100% . Resistance changed to 0 %\n";
		enemyResistancePhysic = 0;
	}
	if (enemyResistanceMagic < 0)
	{
		cout << "Nothing can have resistance less than 100% . Resistance changed to 0 %\n";
		enemyResistanceMagic = 0;
	}
	if (playerResistanceMagic < 0)
	{
		cout << "Nothing can have resistance less than 100% . Resistance changed to 0 %\n";
		playerResistanceMagic = 0;
	}
	if (playerResistancePhysic < 0)
	{
		cout << "Nothing can have resistance less than 100% . Resistance changed to 0 %\n";
		playerResistancePhysic = 0;
	}
*/

///ShowNameOfGame();
	char **map = CreateMap(rows, cols);
	///EnterNameOfCharacter(name, SIZEOFNAME);
	///FillMap(map, rows, cols);// сюда вводить генерацию существ
	///Commands(map, rows, cols, password);
	///ShowMap(map, rows, cols);
	///Move(map, rows, cols);
	///Interface(name, SIZEOFNAME, strength, strengthExp, agility, agilityExp, intelligence, intelligenceExp,
	///	lifeForce, lifeForceExp, endurance, enduranceExp, luck, luckExp, adaptivity, adaptiveSkills, experience, lvl);


	/*do
	{
		char choice1 = ShowAndChooseMainMenu();
		switch (choice1)
		{
		case '1':
			choice2 = ShowAndChoosePlayMenu();
			switch (choice2)
			{
			case '1':
				ShowMap(map, rows, cols);
				Move(map, rows, cols);
				break;
			case '2':
				break;
			default:
				cout << "Incorrectly\n";
				break;
			}
			break;
		case '2':
			ShowRules();
			break;
		case '3':
			ShowCreators();
			break;
		case '4':
			exit1 = true;
			break;
		default:
			cout << "Incorrectly\n";
			break;
		}
	} while (exit1 == false);*/

	DeleteMap(map, rows);

	system("pause");
	return 0;
}
void ShowNameOfGame()
{
	char screen[] = "RPG Game";
	for (int i = 0; i < 8; i++)
	{
		cout << screen[i];
		int num = rand() % 101 + 50;
		Sleep(num);
	}
	cout << endl;
}

int ShowAndChooseMainMenu()
{
	cout << "1 - Play\n";
	cout << "2 - Rules\n";
	cout << "3 - Creators\n";
	cout << "4 - Exit\n";

	char choice1;
	do
	{
		cin >> choice1;
		if (choice1 < '1' || choice1 > '4')
			cout << "Incorrectly\n";
		else
			break;
	} while (true);
	return choice1;

}
int ShowAndChoosePlayMenu()
{
	cout << "1 - Start dungeon\n";
	cout << "2 - Return to main menu\n";

	char choice2;
	do
	{
		cin >> choice2;
		if (choice2 < '1' || choice2 > '2')
			cout << "Incorrectly\n";
		else
			break;
	} while (true);
	return choice2;
}
void ShowRules()
{
	cout << "Fight. Explore the world. Find loot. Picking up objects. Craft. Kill. And Win.\n";
}
void ShowCreators()
{
	char creator[] = "Petrashek Yaroslav";
	for (int i = 0; i < 18; i++)
	{
		cout << creator[i];
		int temp = rand() % 101 + 50;
		Sleep(temp);
	}
	cout << endl;
}

char **CreateMap(int rows, int cols)
{
	char **map = new char*[rows];
	for (int i = 0; i < rows; i++)
		map[i] = new char[cols];
	return map;
}
void FillMap(char **map, int rows, int cols)
{
	for (int r = 0; r < rows; r++)
		for (int c = 0; c < cols; c++)
			map[r][c] = '#';

	for (int a = 0; a < ((rows + cols) / 2) / 4; a++)
	{
		do
		{
			int rRand = rand() % (rows - 2) + 1;
			int cRand = rand() % (cols - 2) + 1;

			if (map[rRand][cRand] == '#')
			{
				map[rRand][cRand] = ' ';
				break;
			}
		} while (true);

		for (int i = 0; i < 10; i++)
		{
			int direction = rand() % 4 + 1;

			switch (direction)
			{
			case 1://up
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r - 1][c] != ' ' && map[r - 1][c + 1] != ' ' && map[r - 1][c - 1] != ' ') && r - 1 > 1)
							{
								map[r - 1][c] = ' ';
								map[r][c] = '=';
							}
				break;
			case 2://right
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r][c + 1] != ' ' && map[r - 1][c + 1] != ' ' && map[r + 1][c + 1] != ' ') && c + 1 < cols - 1)
							{
								map[r][c + 1] = ' ';
								map[r][c] = '=';
							}
				break;
			case 3://down
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r + 1][c] != ' ' && map[r + 1][c + 1] != ' ' && map[r + 1][c - 1] != ' ') && r + 1 < rows - 1)
							{
								map[r + 1][c] = ' ';
								map[r][c] = '=';
							}
				break;
			case 4://left
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r][c - 1] != ' ' && map[r - 1][c - 1] != ' ' && map[r + 1][c - 1] != ' ') && c - 1 > 1)
							{
								map[r][c - 1] = ' ';
								map[r][c] = '=';
							}
				break;
			default:
				cout << "Error\n";
				break;
			}
		}
	}

	for (int r = 0; r < rows; r++)
		for (int c = 0; c < cols; c++)
			if (map[r][c] == '=')
				map[r][c] = ' ';

	GateToNextLvlSpawn(map, rows, cols);
	PlayerCreate(map, rows, cols);
	MonstersSpawn(map, rows, cols);
}
void ShowMap(char **map, int rows, int cols)
{
	for (int r = 0; r < rows; r++)
	{
		for (int c = 0; c < cols; c++)
			cout << map[r][c];
		cout << endl;
	}
}
void DeleteMap(char **map, int rows)
{
	for (int i = 0; i < rows; i++)
		delete[]map[i];
	delete[]map;
}

void EnterNameOfCharacter(char name[], const int SIZEOFNAME)
{
	cout << "Enter name of your character\n";
	cin.getline(name, SIZEOFNAME);
}
void Move(char **map, int rows, int cols)
{
	do
	{
		char directionOfMove;
		int rCopy, cCopy;

		do
		{
			cout << "1 - move up\n2 - move right\n3 - move down\n4 - move left\n";
			cin >> directionOfMove;
		} while (directionOfMove < '1' || directionOfMove > '4');

		for (int r = 0; r < rows; r++)
			for (int c = 0; c < cols; c++)
				if (map[r][c] == 'o')
				{
					rCopy = r;
					cCopy = c;
				}

		if (directionOfMove == '1' && map[rCopy - 1][cCopy] == ' ')
		{
			map[rCopy][cCopy] = ' ';
			map[rCopy - 1][cCopy] = 'o';
			break;
		}
		else if (directionOfMove == '2' && map[rCopy][cCopy + 1] == ' ')
		{
			map[rCopy][cCopy] = ' ';
			map[rCopy][cCopy + 1] = 'o';
			break;
		}
		else if (directionOfMove == '3' && map[rCopy + 1][cCopy] == ' ')
		{
			map[rCopy][cCopy] = ' ';
			map[rCopy + 1][cCopy] = 'o';
			break;
		}
		else if (directionOfMove == '4' && map[rCopy][cCopy - 1] == ' ')
		{
			map[rCopy][cCopy] = ' ';
			map[rCopy][cCopy - 1] = 'o';
			break;
		}
	} while (true);
	system("cls");
	ShowMap(map, rows, cols);
}

void Interface(char name[], const int SIZEOFNAME, int strength, int strengthExp, int agility, int agilityExp, int intelligence, int intelligenceExp,
	int lifeForce, int lifeForceExp, int endurance, int enduranceExp, int luck, int luckExp, int adaptivity, bool adaptiveSkills, int experience, int lvl)
{
	for (int i = 0; i < SIZEOFNAME; i++)
		cout << name[i];
	cout << "\tExperience:" << experience << "\tLvl:" << lvl << endl;
	cout << "LifeForce:\tExp:" << lifeForceExp << "/100\tLvl:" << lifeForce << endl;
	cout << "\t\tHp:" << /*playerHp*/lifeForce * 20 << "/" << lifeForce * 20 << endl;
	cout << "Strength:\tExp:" << strengthExp << "/100\tLvl:" << strength << endl;
	cout << "\t\tMax cargo:" << /*weigth*/1 << "kg\tPhysical resistance:" << strength << "+" << 0/*baffs*/ << endl;
	cout << "Agility:\tExp:" << agilityExp << "/100\tLvl:" << agility << endl;
	cout << "\t\tChance to avoid:" << agility << "%\tMobility:" << agility << endl;
	cout << "Intelligence:\tExp:" << intelligenceExp << "/100\tLvl:" << intelligence << endl;
	cout << "\t\tMp:" << intelligence * 5 << "\tLearnability:" << intelligence << ",Magic resistance:" << intelligence << "+" << 0/*baffs*/ << endl;
	cout << "Endurance:\t\tExp:" << enduranceExp << "/100\tLvl:" << endurance << endl;
	cout << "\t\tStamina:" << endurance * 5 << "\tAcceleration of regeneration:" << endurance / 2.0 << "%\n";
	cout << "Luck:\t\tExp:" << luckExp << "/100\tLvl:" << luck << endl;
	cout << "\t\tChance to successful action:" << luck / 2.0 << "%\n\t\tChance to find items:" << luck / 2.0 << "%\n";
	cout << "Adaptivity:\tLvl:" << adaptivity << endl;
	cout << "\t\tResistance:" << adaptivity << "%\tAdaptive skills:" << (adaptiveSkills ? "true" : "false.You need Adp.Lvl 6") << endl;
}

void PlayerCreate(char **map, int rows, int cols)
{
	do
	{
		int rRand = rand() % (rows - 2) + 1;
		int cRand = rand() % (cols - 2) + 1;

		if (map[rRand][cRand] == ' ' && map[rRand][cRand] != 'M' && map[rRand][cRand] != 'E')
		{
			map[rRand][cRand] = 'o';
			break;
		}
	} while (true);
}
void MonstersSpawn(char **map, int rows, int cols)
{
	for (int i = 0; i < ((rows + cols) / 2) / 4; i++)
		do
		{
			int rRand = rand() % (rows - 2) + 1;
			int cRand = rand() % (cols - 2) + 1;

			if (map[rRand][cRand] == ' ' && map[rRand][cRand] != 'o' && map[rRand][cRand] != 'E')
			{
				map[rRand][cRand] = 'M';
				break;
			}
		} while (true);
}
void GateToNextLvlSpawn(char **map, int rows, int cols)
{
	do
	{
		int rRand = rand() % (rows - 2) + 1;
		int cRand = rand() % (cols - 2) + 1;

		if (map[rRand][cRand] == ' ' && map[rRand][cRand] != 'o')
		{
			int walls = 0;
			if (map[rRand + 1][cRand] == '#')
				walls++;
			if (map[rRand - 1][cRand] == '#')
				walls++;
			if (map[rRand][cRand + 1] == '#')
				walls++;
			if (map[rRand][cRand - 1] == '#')
				walls++;
			if (walls == 3)
			{
				map[rRand][cRand] = 'E';
				break;
			}
		}
	} while (true);
}

int Authorisation(char password[2])
{
	char enter[2]{};
	cout << "Enter symbol\n";
	cin.getline(enter, 2);
	if (nullptr != strstr(password, enter))
	{
		cout << "Access ALLOWED\n";
		cout << "Entering";
		char foolstop[6]{ "....." };
		for (int i = 0; i < 6; i++)
		{
			Sleep(200);
			cout << foolstop[i];
		}
		cout << endl;
		return 1;
	}
	cout << "Access DENIED\n";
	return 0;
}
void Commands(char **map, int rows, int cols, char password[2])
{
	int enter = Authorisation(password);
	Sleep(1000);
	system("cls");
	if (enter == 1)
	{
		bool exit = false;
		do
		{
			int choice;
			cout << "1 - List of commands\n";
			cout << "2 - Enter command\n";
			cout << "3 - Exit\n";
			cin >> choice;
			switch (choice)
			{
			case 1:
				system("cls");
				ListOfCommands();
				break;
			case 2:
				char command;
				cout << "Enter 'Exit' to exit\n";
				cin >> command;
				switch (command)
				{
				case '1':
					do
					{
						int rCin, cCin;
						system("cls");
						ShowMap(map, rows, cols);

						cout << "Enter x\n";
						cin >> rCin;
						cout << "Enter y\n";
						cin >> cCin;

						if (map[rCin][cCin] == '#')
						{
							map[rCin][cCin] = ' ';
							break;
						}
					} while (true);
					system("cls");
					break;
				case 'Exit':
					break;
				default:
					cout << "Incorrectly\n";
					break;
				}
				break;
			case 3:
				exit = true;
				system("cls");
				break;
			default:
				cout << "Incorrectly\n";
				break;
			}
		} while (exit == false);
	}
}
void ListOfCommands()
{
	cout << "1 - DestroyWall\n";
	cout << " - \n";
	cout << " - \n";
}







