#include <iostream>	
#include <ctime>	
#include <cstdlib>	
#include <cstring>	
#include <Windows.h>	
using namespace std;

void ShowNameOfGame();
int ShowAndChooseMainMenu();
int ShowAndChoosePlayMenu();
void ShowRules();
void ShowCreators();

char **CreateMap(int rows, int cols);
void FillMap(char **map, int rows, int cols);
void ShowMap(char **map, int rows, int cols);
void DeleteMap(char **map, int rows);

void EnterNameOfCharacter(char name[], const int SIZEOFNAME);
void Move(char name[], const int SIZEOFNAME, char **map, int rows, int cols);
void Interface(char name[], const int SIZEOFNAME);

void PlayerCreate(char **map, int rows, int cols);
void MonstersSpawn(char **map, int rows, int cols);
void GateToNextLvlSpawn(char **map, int rows, int cols);

int Authorisation(char password[2]);
void Commands(char **map, int rows, int cols);
void ListOfCommands();

int isAttack(char **map, int rows, int cols, int directionOfMove, int rCopy, int cCopy);
void Fight(char name[], const int SIZEOFNAME);
void Repartition(int strengthExpPlus, int agilityExpPlus, int intelligenceExpPlus, int lifeForceExpPlus, int enduranceExpPlus, int luckExpPlus, int experiencePlus);
void SkillImprovement(char name[], const int SIZEOFNAME);

void AttackCout();
void ShowAttackOfEnemy();
void AttackOfEnemy();


void LootGenerator();
void InventoryShow();
void LocationInfo();

int skills = 0;

int lvl = 0;
int experience = 0;
int lifeForce = 5;
int lifeForceExp = 0;
int strength = 5;
int strengthExp = 0;
int agility = 5;
int agilityExp = 0;
int intelligence = 5;
int intelligenceExp = 0;
int endurance = 5;
int enduranceExp = 0;
int luck = 1;
int luckExp = 0;
int adaptivity = 0;
///int leadership = 1;
///int leadershipExp = 0;

bool nextFloor = false;
bool win = false;
bool death = false;

int main()
{
	srand(time(nullptr));


	bool exit1 = false;
	char choice2;
	int rows = rand() % 12 + 9;
	int cols = rand() % 12 + 9;
	const int SIZEOFNAME = 15;
	char name[SIZEOFNAME]{};
	int dungeonLvl = 1;

	ShowNameOfGame();
	char **map = CreateMap(rows, cols);
	EnterNameOfCharacter(name, SIZEOFNAME);

	do
	{
		char choice1 = ShowAndChooseMainMenu();
		switch (choice1)
		{
		case '1':
			choice2 = ShowAndChoosePlayMenu();
			switch (choice2)
			{
			case '1':
				do//генерация уровня
				{
					FillMap(map, rows, cols);// сюда вводить генерацию существ
					nextFloor = false;
					do
					{
						Move(name, SIZEOFNAME, map, rows, cols);//прохождение
					} while (nextFloor == false);
					if (death == true)
					{
						system("cls");
						cout << "Game over\n";
						break;
					}
					dungeonLvl++;
					cout << "Entering on " << dungeonLvl << " floor\n";
					Sleep(2500);
					if (dungeonLvl == 100)
					{
						system("cls");
						cout << "You end the trail!\tCongratulations!\n";
					}
				} while (win == false);
				break;
			case '2':
				break;
			default:
				cout << "Incorrectly\n";
				break;
			}
			break;
		case '2':
			ShowRules();
			break;
		case '3':
			ShowCreators();
			break;
		case '4':
			exit1 = true;
			break;
		default:
			cout << "Incorrectly\n";
			break;
		}
	} while (exit1 == false);

	DeleteMap(map, rows);

	system("pause");
	return 0;
}
void ShowNameOfGame()
{
	char screen[] = "RPG Game";
	for (int i = 0; i < 8; i++)
	{
		cout << screen[i];
		int num = rand() % 101 + 50;
		Sleep(num);
	}
	cout << endl;
}

int ShowAndChooseMainMenu()
{
	cout << "1 - Play\n";
	cout << "2 - Rules\n";
	cout << "3 - Creators\n";
	cout << "4 - Exit\n";

	char choice1;
	do
	{
		cin >> choice1;
		if (choice1 < '1' || choice1 > '4')
			cout << "Incorrectly\n";
		else
			break;
	} while (true);
	return choice1;

}
int ShowAndChoosePlayMenu()
{
	cout << "1 - Start dungeon\n";
	cout << "2 - Return to main menu\n";

	char choice2;
	do
	{
		cin >> choice2;
		if (choice2 < '1' || choice2 > '2')
			cout << "Incorrectly\n";
		else
			break;
	} while (true);
	return choice2;
}
void ShowRules()
{
	system("cls");
	cout << "Fight. Explore the world. Find loot. Picking up objects. Craft. Kill. And Win.\n";
}
void ShowCreators()
{
	system("cls");
	char creator[] = "Petrashek Yaroslav";
	for (int i = 0; i < 18; i++)
	{
		cout << creator[i];
		int temp = rand() % 101 + 50;
		Sleep(temp);
	}
	cout << endl;
}

char **CreateMap(int rows, int cols)
{
	char **map = new char*[rows];
	for (int i = 0; i < rows; i++)
		map[i] = new char[cols];
	return map;
}
void FillMap(char **map, int rows, int cols)
{
	for (int r = 0; r < rows; r++)
		for (int c = 0; c < cols; c++)
			map[r][c] = '#';

	for (int a = 0; a < ((rows + cols) / 2) / 4; a++)
	{
		do
		{
			int rRand = rand() % (rows - 2) + 1;
			int cRand = rand() % (cols - 2) + 1;

			if (map[rRand][cRand] == '#')
			{
				map[rRand][cRand] = ' ';
				break;
			}
		} while (true);

		for (int i = 0; i < 10; i++)
		{
			int direction = rand() % 4 + 1;

			switch (direction)
			{
			case 1://up
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r - 1][c] != ' ' && map[r - 1][c + 1] != ' ' && map[r - 1][c - 1] != ' ') && r - 1 > 1)
							{
								map[r - 1][c] = ' ';
								map[r][c] = '=';
							}
				break;
			case 2://right
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r][c + 1] != ' ' && map[r - 1][c + 1] != ' ' && map[r + 1][c + 1] != ' ') && c + 1 < cols - 1)
							{
								map[r][c + 1] = ' ';
								map[r][c] = '=';
							}
				break;
			case 3://down
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r + 1][c] != ' ' && map[r + 1][c + 1] != ' ' && map[r + 1][c - 1] != ' ') && r + 1 < rows - 1)
							{
								map[r + 1][c] = ' ';
								map[r][c] = '=';
							}
				break;
			case 4://left
				for (int r = 0; r < rows; r++)
					for (int c = 0; c < cols; c++)
						if (map[r][c] == ' ')
							if ((map[r][c - 1] != ' ' && map[r - 1][c - 1] != ' ' && map[r + 1][c - 1] != ' ') && c - 1 > 1)
							{
								map[r][c - 1] = ' ';
								map[r][c] = '=';
							}
				break;
			default:
				cout << "Error\n";
				break;
			}
		}
	}

	for (int r = 0; r < rows; r++)
		for (int c = 0; c < cols; c++)
			if (map[r][c] == '=')
				map[r][c] = ' ';

	GateToNextLvlSpawn(map, rows, cols);
	PlayerCreate(map, rows, cols);
	MonstersSpawn(map, rows, cols);
}
void ShowMap(char **map, int rows, int cols)
{
	for (int r = 0; r < rows; r++)
	{
		for (int c = 0; c < cols; c++)
			cout << map[r][c];
		cout << endl;
	}
}
void DeleteMap(char **map, int rows)
{
	for (int i = 0; i < rows; i++)
		delete[]map[i];
	delete[]map;
}

void EnterNameOfCharacter(char name[], const int SIZEOFNAME)
{
	cout << "Enter name of your character\n";
	cin.getline(name, SIZEOFNAME);
}
void Move(char name[], const int SIZEOFNAME, char **map, int rows, int cols)
{
	do
	{
		char directionOfMove;
		int rCopy, cCopy;
		do
		{
			system("cls");
			ShowMap(map, rows, cols);
			cout << "1 - move up\t5 - Interface\n2 - move right\n3 - move down\n4 - move left\n";
			cin >> directionOfMove;
			if (directionOfMove == '/')
				Commands(map, rows, cols);
			else if (directionOfMove == '5')
				Interface(name, SIZEOFNAME);
		} while (directionOfMove < '1' || directionOfMove > '4');

		for (int r = 0; r < rows; r++)
			for (int c = 0; c < cols; c++)
				if (map[r][c] == 'o')
				{
					rCopy = r;
					cCopy = c;
				}

		int attack = 0;
		attack = isAttack(map, rows, cols, directionOfMove, rCopy, cCopy);

		if (attack == 0)
		{
			if (directionOfMove == '1' && map[rCopy - 1][cCopy] == ' ')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy - 1][cCopy] = 'o';
				break;
			}
			else if (directionOfMove == '2' && map[rCopy][cCopy + 1] == ' ')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy][cCopy + 1] = 'o';
				break;
			}
			else if (directionOfMove == '3' && map[rCopy + 1][cCopy] == ' ')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy + 1][cCopy] = 'o';
				break;
			}
			else if (directionOfMove == '4' && map[rCopy][cCopy - 1] == ' ')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy][cCopy - 1] = 'o';
				break;
			}


			if (directionOfMove == '1' && map[rCopy - 1][cCopy] == 'E')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy - 1][cCopy] = 'o';
				nextFloor = true;
				break;
			}
			else if (directionOfMove == '2' && map[rCopy][cCopy + 1] == 'E')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy][cCopy + 1] = 'o';
				nextFloor = true;
				break;
			}
			else if (directionOfMove == '3' && map[rCopy + 1][cCopy] == 'E')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy + 1][cCopy] = 'o';
				nextFloor = true;
				break;
			}
			else if (directionOfMove == '4' && map[rCopy][cCopy - 1] == 'E')
			{
				map[rCopy][cCopy] = ' ';
				map[rCopy][cCopy - 1] = 'o';
				nextFloor = true;
				break;
			}
		}

		if (attack == 1)
			Fight(name, SIZEOFNAME);
	} while (nextFloor == false);
	system("cls");
	ShowMap(map, rows, cols);
}

void Interface(char name[], const int SIZEOFNAME)
{
	system("cls");
	for (int i = 0; i < SIZEOFNAME; i++)
		cout << name[i];
	cout << "\tExperience:" << experience << "\tLvl:" << lvl << endl;
	cout << "\t To the next level:" << (5000 + lvl * 10000) - experience << "\tAll exp that need:" << 5000 + lvl * 10000 << endl;
	cout << "LifeForce:\tExp:" << lifeForceExp << "/150\tLvl:" << lifeForce << endl;
	cout << "\t\tHp:" << /*playerHp*/lifeForce * 20 << "/" << lifeForce * 20 << endl;
	cout << "Strength:\tExp:" << strengthExp << "/100\tLvl:" << strength << endl;
	cout << "\t\tMax cargo:" << /*weigth*/1 << "kg\tPhysical resistance:" << strength << "+" << 0/*baffs*/ << endl;
	cout << "Agility:\tExp:" << agilityExp << "/100\tLvl:" << agility << endl;
	cout << "\t\tChance to avoid:" << agility << "%\tMobility:" << agility << endl;
	cout << "Intelligence:\tExp:" << intelligenceExp << "/100\tLvl:" << intelligence << endl;
	cout << "\t\tMp:" << intelligence * 5 << "\tLearnability:" << intelligence << ",Magic resistance:" << intelligence << "+" << 0/*baffs*/ << endl;
	cout << "Endurance:\t\tExp:" << enduranceExp << "/100\tLvl:" << endurance << endl;
	cout << "\t\tStamina:" << endurance * 5 << "\tAcceleration of regeneration:" << endurance / 2.0 << "%\n";
	cout << "Luck:\t\tExp:" << luckExp << "/100\tLvl:" << luck << endl;
	cout << "\t\tChance to successful action:" << luck / 2.0 << "%\n\t\tChance to find items:" << luck / 2.0 << "%\n";
	cout << "Adaptivity:\tLvl:" << adaptivity << endl;
	cout << "\t\tResistance:" << adaptivity << "%\tAdaptive skills:";
	if (adaptivity >= 6)
		cout << "true" << endl;
	else
		cout << "false.You need Adp.Lvl 6" << endl;

	Sleep(10000);
}

void PlayerCreate(char **map, int rows, int cols)
{
	do
	{
		int rRand = rand() % (rows - 2) + 1;
		int cRand = rand() % (cols - 2) + 1;

		if (map[rRand][cRand] == ' ' && map[rRand][cRand] != 'M' && map[rRand][cRand] != 'E')
		{
			map[rRand][cRand] = 'o';
			break;
		}
	} while (true);
}
void MonstersSpawn(char **map, int rows, int cols)
{
	for (int i = 0; i < ((rows + cols) / 2) / 4; i++)
		do
		{
			int rRand = rand() % (rows - 2) + 1;
			int cRand = rand() % (cols - 2) + 1;

			if (map[rRand][cRand] == ' ' && map[rRand][cRand] != 'o' && map[rRand][cRand] != 'E')
			{
				map[rRand][cRand] = 'M';
				break;
			}
		} while (true);
}
void GateToNextLvlSpawn(char **map, int rows, int cols)
{
	do
	{
		int rRand = rand() % (rows - 2) + 1;
		int cRand = rand() % (cols - 2) + 1;

		if (map[rRand][cRand] == ' ' && map[rRand][cRand] != 'o')
		{
			int walls = 0;
			if (map[rRand + 1][cRand] == '#')
				walls++;
			if (map[rRand - 1][cRand] == '#')
				walls++;
			if (map[rRand][cRand + 1] == '#')
				walls++;
			if (map[rRand][cRand - 1] == '#')
				walls++;
			if (walls == 3)
			{
				map[rRand][cRand] = 'E';
				break;
			}
		}
	} while (true);
}

int Authorisation(char password[2])
{
	char enter[2]{};
	cout << "Enter symbol\n";
	cin.getline(enter, 2);
	if (nullptr != strstr(password, enter))
	{
		cout << "Access ALLOWED\n";
		cout << "Entering";
		char foolstop[6]{ "....." };
		for (int i = 0; i < 6; i++)
		{
			Sleep(200);
			cout << foolstop[i];
		}
		cout << endl;
		return 1;
	}
	cout << "Access DENIED\n";
	return 0;
}
void Commands(char **map, int rows, int cols)
{
	char password[2]{ "/" };// PASSWORD to console

	int enter = Authorisation(password);
	Sleep(1000);
	system("cls");
	if (enter == 1)
	{
		bool exit = false;
		do
		{
			int choice;
			cout << "1 - List of commands\n";
			cout << "2 - Enter command\n";
			cout << "3 - Exit\n";
			cin >> choice;
			switch (choice)
			{
			case 1:
				system("cls");
				ListOfCommands();
				break;
			case 2:
				char command;
				cout << "Enter 'Exit' to exit\n";
				cin >> command;
				switch (command)
				{
				case '1':
					do
					{
						int rCin, cCin;
						system("cls");
						ShowMap(map, rows, cols);

						cout << "Enter x\n";
						cin >> rCin;
						cout << "Enter y\n";
						cin >> cCin;

						if (map[rCin][cCin] == '#')
						{
							map[rCin][cCin] = ' ';
							break;
						}
					} while (true);
					system("cls");
					break;
				case 'Exit':
					break;
				default:
					cout << "Incorrectly\n";
					break;
				}
				break;
			case 3:
				exit = true;
				system("cls");
				break;
			default:
				cout << "Incorrectly\n";
				break;
			}
		} while (exit == false);
	}
}
void ListOfCommands()
{
	cout << "1 - DestroyWall\n";
	cout << " - \n";
	cout << " - \n";
}

int isAttack(char **map, int rows, int cols, int directionOfMove, int rCopy, int cCopy)
{
	if (directionOfMove == '1' && map[rCopy - 1][cCopy] == 'M')
	{
		map[rCopy][cCopy] = ' ';
		map[rCopy - 1][cCopy] = 'o';
		return 1;
	}
	else if (directionOfMove == '2' && map[rCopy][cCopy + 1] == 'M')
	{
		map[rCopy][cCopy] = ' ';
		map[rCopy][cCopy + 1] = 'o';
		return 1;
	}
	else if (directionOfMove == '3' && map[rCopy + 1][cCopy] == 'M')
	{
		map[rCopy][cCopy] = ' ';
		map[rCopy + 1][cCopy] = 'o';
		return 1;
	}
	else if (directionOfMove == '4' && map[rCopy][cCopy - 1] == 'M')
	{
		map[rCopy][cCopy] = ' ';
		map[rCopy][cCopy - 1] = 'o';
		return 1;
	}
	return 0;
}
void Fight(char name[], const int SIZEOFNAME)
{
	system("cls");
	int turn = 0;
	int choice, magic, playerDamage;

	int playerMpMax = intelligence * 5;
	int playerHpMax = lifeForce * 20;
	int playerMp = playerMpMax;
	int playerHp = playerHpMax;
	int enemyMpMax = 100 + lvl * 25;
	int enemyHpMax = 100 + lvl * 25;
	int enemyMp = enemyMpMax;
	int enemyHp = enemyHpMax;

	int fireball = 100;
	int fireballMp = 50;
	int bolter = 60;
	int bolterMp = 30;
	int manaDrain = 100;
	int punch = 50;
	int kick = 20;

	int playerResistanceMagic = intelligence;
	int playerResistancePhysic = strength;
	int enemyResistanceMagic = 20;
	int enemyResistancePhysic = 20;

	int enemyPhysicDamage = 50;
	int enemyMagicDamage = 75;

	int enemyRegeneration = 10;
	int playerRegeneration = 10;
	int enemyMpRegeneration = 10;
	int playerMpRegeneration = 10;

	int strengthExpPlus = 0;
	int agilityExpPlus = 0;
	int intelligenceExpPlus = 0;
	int lifeForceExpPlus = 0;
	int enduranceExpPlus = 0;
	int luckExpPlus = 0;
	int experiencePlus = 0;

	do
	{
		cout << turn << " Turn of battle\n\n";
		cout << "Your turn\n\n";
		cout << "Attack with (1)MP or (2)physic?\n";
		cin >> choice;
		system("cls");
		if (choice == 1)
		{
			cout << "Type of your magic: \n (1)Fireball(dmg:100,cost:50mp) \n (2)Bolter(dmg:60,cost:30mp)\n";
			cout << " (3)Mana drain(dmg:0,cost:100mp,receive:25% of enemy mp)\n";
			cout << " (4)Mana explosion(dmg:1 000 % mp(of enemy),cost:80% of your mp)\n(Only if enemy has HP higher than 10 000)\n";

			cin >> magic;
			system("cls");
			switch (magic)
			{
			case(1):
				if (playerMp < 50)
					cout << "Not enough mana!Attack denied\n\n";
				else
				{
					cout << "You use Fireball\n\n";
					enemyHp -= fireball - (fireball / 100 * enemyResistanceMagic);
					playerMp -= fireballMp;
					intelligenceExpPlus += fireballMp;
					break;
				}
			case(2):
				if (playerMp < 30)
					cout << "Not enough mana!Attack denied\n\n";
				else
				{
					cout << "You use Bolter\n\n";
					enemyHp -= bolter - (bolter / 100 * enemyResistanceMagic);
					playerMp -= bolterMp;
					intelligenceExpPlus += bolterMp;
					break;
				}
			case(3):
				cout << "You use Mana drain\n\n";
				playerMp -= manaDrain;
				enemyMp -= enemyMp / 100 * 25;
				playerMp += enemyMp / 100 * 25;
				intelligenceExpPlus += manaDrain;
				break;
			case(4):
				if (enemyHp < 10000)
					cout << "Enemy has HP lower than 10 000! Attack denied\n\n";
				else
				{
					if (playerMp < playerMp / 100 * 80)
						cout << "Not enough mana!Attack denied\n\n";
					else
					{
						cout << "You use Mana explosion\n\n";
						enemyHp -= enemyMp * 10 - (enemyMp * 10 / 100 * enemyResistanceMagic);
						playerMp -= playerMp / 100 * 80;
						intelligenceExpPlus += playerMp / 100 * 80;
						break;
					}
				}
			default:
				cout << "You can use only type that you see , you denied your attack\n\n";
				break;
			}
		}
		else if (choice == 2)
		{
			cout << "Enter type of your dmg: \n (1)Punch(dmg:50,cost:0mp) \n (2)Kick(dmg:20,cost:0mp)\n";
			cin >> playerDamage;
			system("cls");
			switch (playerDamage)
			{
			case(1):
				cout << "You use Punch\n\n";
				enemyHp -= punch - (punch / 100 * enemyResistancePhysic);
				strengthExpPlus += punch - (punch / 100 * enemyResistancePhysic);
				break;
			case(2):
				cout << "You use Kick\n\n";
				enemyHp -= kick - (kick / 100 * enemyResistancePhysic);
				strengthExpPlus += kick - (kick / 100 * enemyResistancePhysic);
				break;
			default:
				cout << "You don't do anything\n\n";
				break;
			}
		}
		else
			cout << "You don't act\n\n";

		if (enemyHp > 0)
		{
			cout << "Turn of enemy......\n\n";
			int enemyChoice = rand() % 2;
			switch (enemyChoice)
			{
			case(0):
				cout << "Enemy uses Basic attack\n";
				cout << "You received  " << enemyPhysicDamage << "  damage\n\n";
				playerHp -= enemyPhysicDamage - playerResistancePhysic;
				enemyPhysicDamage = enemyPhysicDamage + (turn * 5);
				lifeForceExpPlus += enemyPhysicDamage - playerResistancePhysic;
				break;
			case(1):
				if (enemyMp >= 20)
				{
					cout << "Enemy uses Basic magic attack\n";
					cout << "You received  " << enemyMagicDamage << "  damage\n\n";
					playerHp -= enemyMagicDamage - playerResistanceMagic;
					enemyMagicDamage = enemyMagicDamage + (turn * 10);
					enemyMp -= 20;
					lifeForceExpPlus += enemyMagicDamage - playerResistanceMagic;
				}
				else
					cout << "Enemy skip the turn\n";
				break;
			default:
				cout << "Enemy skip the turn\n";
				break;
			}
			Sleep(5000);
			system("cls");
		}
		else if (enemyHp <= 0)
		{
			cout << "You win, enemy fainted\n";
			experiencePlus += 5000;
			break;
		}
		else if (playerHp <= 0)
		{
			cout << "You fainted\n";
			death = true;
			break;
		}
		else
		{
			cout << "Hp enemy:\t" << enemyHp << "/" << enemyHpMax << endl;
			cout << "Mp enemy:\t" << enemyMp << "/" << enemyMpMax << endl;
			cout << "Player Hp:\t" << playerHp << "/" << playerHpMax << endl;
			cout << "Player Mp:\t" << playerMp << "/" << playerMpMax << endl << endl;
			cout << "Regeneration...\n\n";
			if (enemyHp <= enemyHpMax - enemyRegeneration)
				enemyHp += enemyRegeneration;
			if (playerHp <= playerHpMax - playerRegeneration)
				playerHp += playerRegeneration;
			if (enemyMp <= enemyMpMax - enemyMpRegeneration)
				enemyMp += enemyMpRegeneration;
			if (playerMp <= playerMpMax - playerMpRegeneration)
				playerMp += playerMpRegeneration;
			cout << "Hp enemy:\t" << enemyHp << "/" << enemyHpMax << endl;
			cout << "Mp enemy:\t" << enemyMp << "/" << enemyMpMax << endl;
			cout << "Player Hp:\t" << playerHp << "/" << playerHpMax << endl;
			cout << "Player Mp:\t" << playerMp << "/" << playerMpMax << endl << endl;
			turn++;
			Sleep(5000);
			system("cls");
		}
	} while (playerHp > 0 || enemyHp > 0);

	experiencePlus += experience;
	while (experiencePlus >= 5000 + lvl * 10000)
	{
		experiencePlus -= 5000 + lvl * 10000;
		lvl++;
		skills += 5;
		SkillImprovement(name, SIZEOFNAME);
	}
	experience = experiencePlus;
	if (adaptivity >= 6)
		Repartition(strengthExpPlus, agilityExpPlus, intelligenceExpPlus, lifeForceExpPlus, enduranceExpPlus, luckExpPlus, experiencePlus/*, strength, strengthExp, agility, agilityExp, intelligence, intelligenceExp, lifeForce, lifeForceExp, endurance, enduranceExp, luck, luckExp, adaptivity, experience, lvl*/);
}
void Repartition(int strengthExpPlus, int agilityExpPlus, int intelligenceExpPlus, int lifeForceExpPlus, int enduranceExpPlus, int luckExpPlus, int experiencePlus)
{
	strengthExpPlus += strengthExp;
	while (strengthExpPlus >= 100)
	{
		strengthExpPlus += strengthExpPlus / 100 * adaptivity;
		strengthExpPlus -= 100;
		strength++;
	}
	strengthExp = strengthExpPlus;

	agilityExpPlus += agilityExp;
	while (agilityExpPlus >= 100)
	{
		agilityExpPlus += agilityExpPlus / 100 * adaptivity;
		agilityExpPlus -= 100;
		agility++;
	}
	agilityExp = agilityExpPlus;

	intelligenceExpPlus += intelligenceExp;
	while (intelligenceExpPlus >= 100)
	{
		intelligenceExpPlus += intelligenceExpPlus / 100 * adaptivity;
		intelligenceExpPlus -= 100;
		intelligence++;
	}
	intelligenceExp = intelligenceExpPlus;

	lifeForceExpPlus += lifeForceExp;
	while (lifeForceExpPlus >= 150)
	{
		lifeForceExpPlus += lifeForceExpPlus / 100 * adaptivity;
		lifeForceExpPlus -= 150;
		lifeForce++;
	}
	lifeForceExp = lifeForceExpPlus;

	enduranceExpPlus += enduranceExp;
	while (enduranceExpPlus >= 100)
	{
		enduranceExpPlus += enduranceExpPlus / 100 * adaptivity;
		enduranceExpPlus -= 100;
		endurance++;
	}
	enduranceExp = enduranceExpPlus;

	luckExpPlus += luckExp;
	while (luckExpPlus >= 100)
	{
		luckExpPlus += luckExpPlus / 100 * adaptivity;
		luckExpPlus -= 100;
		luck++;
	}
	luckExp = luckExpPlus;
}
void SkillImprovement(char name[], const int SIZEOFNAME)
{
	do
	{
		system("cls");
		char choice;
		cout << "What you need to upgrade?\n\t1 - LifeForce\t0 - Interface\n\t2 - Strength\n\t3 - Agility\n\t4 - Intelligence\n\t5 - Endurance\n\t6 - Luck\n\t7 - Adaptivity\n";
		cin >> choice;
		switch (choice)
		{
		case '0':
			Interface(name, SIZEOFNAME);
			break;
		case '1':
			lifeForce++;
			skills--;
			break;
		case '2':
			strength++;
			skills--;
			break;
		case '3':
			agility++;
			skills--;
			break;
		case '4':
			intelligence++;
			skills--;
			break;
		case '5':
			endurance++;
			skills--;
			break;
		case '6':
			luck++;
			skills--;
			break;
		case '7':
			adaptivity++;
			skills--;
			break;
		}
	} while (skills > 0);
}




